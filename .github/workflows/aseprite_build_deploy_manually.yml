name: Build and deploy Aseprite Manually

on:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version_info: ${{ steps.version_info.outputs.version_info }}
      additional_info: ${{ steps.version_info.outputs.additional_info }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest )
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')
        ADDITIONAL_INFO=$(curl -sL https://raw.githubusercontent.com/WenqiOfficial/aseprite_builder/master/release.md )

        echo "${LATEST_TAG}" > ${LATEST_TAG}.txt
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
        echo "version_info<<EOF" >> $GITHUB_OUTPUT
        echo "$VERSION_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "additional_info<<EOF" >> $GITHUB_OUTPUT
        echo "$ADDITIONAL_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: Load version from cache
      id: version_check
      uses: actions/cache@v3
      with:
        path: ${{ steps.version_info.outputs.latest_tag }}.txt
        key: cached_version

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest, ubuntu-latest, macOS-latest]
       fail-fast: false
    steps:
      - name: Dump version info
        run:  |
          echo "${{ needs.check-version.outputs.version_info }}"
          echo "${{ needs.check-version.outputs.additional_info }}"
      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: (Ubuntu) Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev
      - name: (macOS) Install dependencies
        if: matrix.os == 'macOS-latest'
        run: brew install ninja p7zip
      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v3
        with:
          path: skia
          key: skia-${{ matrix.os }}-cache
      - name: Download Skia if not in cache (linux)
        if: steps.skia-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
        run: |
          curl -o Skia-${{ runner.os }}-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-${{ runner.os }}-Release-x64-libstdc++.zip
          unzip Skia-${{ runner.os }}-Release-X64.zip -d skia
      - name: Download Skia if not in cache
        if: steps.skia-cache.outputs.cache-hit != 'true' && matrix.os != 'ubuntu-latest'
        run: |
          curl -o Skia-${{ runner.os }}-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-${{ runner.os }}-Release-x64.zip
          unzip Skia-${{ runner.os }}-Release-X64.zip -d skia
      - name: Download Aseprite release
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build
      - name: (Windows) Set architecture for the produced binary
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
      - name: (Windows) Setting Visual Studio build environment variables and paths
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
      - name: (Windows) Run CMake
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: cmd
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_IGNORE_PATH='C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/' -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..
      - name: (Ubuntu) Run CMake
        if: matrix.os == 'ubuntu-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..
      - name: (macOS) Run CMake
        if: matrix.os == 'macOS-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..
      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite
      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest
      - name: (Windows) Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      - name: Create release
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          tag_name: ${{ needs.check-version.outputs.latest_tag }}
          name: Aseprite ${{ needs.check-version.outputs.latest_tag }}
          body: |
            ${{ needs.check-version.outputs.version_info }}
            ${{ needs.check-version.outputs.additional_info }}
          draft: false
          prerelease: false

      - name: Realease Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
